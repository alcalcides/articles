Referência: MAZIERO, Carlos A.. Sistemas Operacionais: conceitos e mecanismos. [s. L.]: [s. N.], 2019. 478 p. Disponível em: <http://wiki.inf.ufpr.br/maziero/doku.php?id=socm:start>. Acesso em: 02 jul. 2019.

Citação com autor incluído no texto: Maziero (2019)

Citação com autor não incluído no texto: (MAZIERO, 2019)


##################################################
imagem: SO como uma interface
##################################################

Um sistema computacional é constituído por hardware e software. Mariero (2019) dá uma definição  bastante prática sobre esses três termos:

    Um sistema de computação é constituído basicamente por hardware e software. O hardware é composto por circuitos eletrônicos (processador, memória, portas de entrada/saída, etc.) e periféricos eletro-óptico-mecânicos (teclados, mouses, discos rígidos, unidades de disquete, CD ou DVD, dispositivos USB, etc.). Por sua vez, o software de aplicação é representado por programas destinados ao usuário do sistema, que constituem a razão final de seu uso, como editores de texto,navegadores Internet ou jogos (p. 2)

O hardware é o conjunto dos aparatos materiais que dão forma e recursos tecnológicos suficientes à uma máquina para que ela seja capaz de realizar instruções algorítmicas. A propósito, o que basicamente diferencia esta máquina, chamada de computador, das outras historicamente anteriores, como uma máquina de tear, é a capacidade de realizar um trabalho muito específico: justamente as operações algorítmicas. Ou seja, o que o hardware faz, em sua essência, são operações bem básicas como somar, comparar valores, manipular a memória etc. 

Já o software está mais relacionado às funcionalidades que o computador é capaz de promover através de seus programas. Essas funcionalidades são a abstração de programas, que, por sua vez, são o conjunto de instruções algorítmicas, que, modernamente, são geradas através das linguagens de programação.

Assim, as linguagens de programação, estão relacionadas com o hardware do sistema no sentido em que há uma "simbiose" entre essas esferas da computação; os programas gerados pelas linguagens são executados pelo hardware, depois de serem adequadamente traduzidos para a linguagem da máquina. Ou seja, quem trabalha mesmo é o hardware e o programa apenas o manipula para gerar a abstração. Uma feliz relação "patrão esperto/funcionário analfabeto" que muito beneficia a sociedade.

Entretanto, o relacionamento entre o hardware e o software passa por complexidades cruciais. Primeiro: não necessariamente há uma correspondência do tipo um-para-um entre as instruções da linguagem de programação e as instruções binárias do hardware. Cada processador tem, em sua documentação, a definição de sua liguagem de trabalho, que é seu conjunto de instruções e recursos. Isso sugere que, do outro lado, cada programa tem que ser adequadamente traduzido (compilado ou interpretado) a fim haver compatibilidade com o hardware que, depois de executar as operações, disponibiliza os resultados, os quais são colhidos e adequadamente interpretados pelo software. Nas aplicações modernas, esse ciclo é intensamente retomado.

A dificuldade se avoluma ao constatar a diversidade de processadores: há diversos fabricantes, com diversos modelos, com recursos extra variados, várias arquiteturas possíveis, com suporte a vários outros tipos de equipamentos de hardware e extensão e, dessa forma, surgiria um gigantesco problema de portabilidade de software.

Além disso, uma outra questão é como gerenciar os recursos computacionais como por exemplo a memória, de forma que as diversas aplicações que servem ao usuário não se choquem causando mútua interferência e fatal inconsistência. 

É nesse ponto onde aparece a necessidade de um intermediador entre o software e o hardware, que surge a criação do Sistema Operacional como uma medida adotada, segundo Maziero (2019, p. 2), do lado do software, para servir de interface entre as duas esferas e manter a consistência das aplicações. Também segundo esse autor (2019, p.3), seus objetivos básicos "podem ser sintetizados em duas palavras-chave: 'abstração' e 'gerência'"; aquela para promover portabilidade e esta para evitar os conflitos de uso de hardware.

Maziero (2019) aproveita, ainda em seu primeiro capítulo, para elencar as seguintes categorias de Sistemas Operacionais: Batch (de lote), de rede, distribuído, multiusuário, servidor, desktop, móvel, embarcado e de tempo real. Além disso, ele cita o gerenciamento do processador, de memória, de dispositivos, de arquivo e de proteção como funcionalidades básicas de um SO.

##################################################
imagem: Estrutura de um sistema operacional típico
##################################################

Elementos de um SO

programas utilitários
    Programas utilitários
        terminal
        manipulador de arquivos 
        interface gráfica
            NÃO é o Sistema Operacional
            Augusto (2016) traz uma série de interfaces gráficas da família Linux
        gerência de telas 
        configurações de dispositivos
        formatação de discos e mídias
        ***
    Drivers
        módulos de códigos específicos a um dispositivo
            sata
            usb
            placa gráfica
        comumente disponibilizado pelo fabricante do dispositivo    
        acoplamento ao SO
    Código de inicialização (boot code)
        preparação dos dispositivos instalados
        carregamento do núcleo do SO na memória RAM 
    Núcleo (kernel)
        "coração do sistema operacional"
        gerência dos recursos de hardware
        implementação de diversas abstrações para
            aplicativos
            utilitários do sistema
        
##################################################

Níveis de privilégio
    diferenciação quanto ao uso do hardware
    implementado em flags especiais da cpu 
        função do tipo de código em execução
    tipos básicos
        nível núcleo/supervisor/sistema/monitor/kernel space
            todas as instruções
            toda a memória
            todos os regs
            todas as portas i/o
        nível user / userspace
            subconjunto das instruções
                não RESET 
                não i/o
                não jump
                não call
                não alocação de memória
                não manipulação de arquivos
            subconjunto dos regs
            subconjunto de memória (segfault)
            violão causa exceção a ser tratada => fechar o programa
        o computador é ligado no nível núcleo
    

##################################################
exemplo de syscall na p. 23
##################################################

Chamadas de sistema/system call/syscall (p. 22)

forma de aplicações usarem rotinas de privilégio do núcleo
SOs implementam system library
    implementações de interrupções que realizam rotinas do kernel space 
    trap/interrupção de software
    fluxo de execução de chamada de sistema
        recebe os parâmetros
        prepara os registradores
        executa a instrução em nível de núcleo
            o processador comuta de nível durante a chamada
        deporta os resultados à aplicação 
API (Application programming interface)
    conjunto de Chamadas de sistemas implementadas
    exemplos    
        win32
            Microsoft
        posix
            padrão de interface para núcleo UNIX
    categorias Maziero (2019, p. 25)
